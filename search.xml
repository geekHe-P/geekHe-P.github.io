<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用hexo搭建博客</title>
      <link href="/2021/07/08/create_blog/"/>
      <url>/2021/07/08/create_blog/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo搭建博客及部署到代码托管平台"><a href="#使用hexo搭建博客及部署到代码托管平台" class="headerlink" title="使用hexo搭建博客及部署到代码托管平台"></a>使用hexo搭建博客及部署到代码托管平台</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>下载node.js  <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>下载git  <a href="https://git-scm.com/">https://git-scm.com/</a></li></ul><h2 id="hexo安装与初始化"><a href="#hexo安装与初始化" class="headerlink" title="hexo安装与初始化"></a>hexo安装与初始化</h2><blockquote><p>官方中文文档  <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g //全局安装</span><br><span class="line"><span class="built_in">cd</span> 自己的博客文件夹 //文件夹必须是空的，不要有空格,汉字,特殊符号</span><br><span class="line">hexo init  //博客初始化</span><br><span class="line">npm install</span><br><span class="line">hexo server  //本地查看博客</span><br></pre></td></tr></table></figure><p>至此你就拥有了一个简陋的本地博客</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709102532.png"></p><h2 id="部署到代码托管平台"><a href="#部署到代码托管平台" class="headerlink" title="部署到代码托管平台"></a>部署到代码托管平台</h2><h3 id="创建一个GitHub仓库"><a href="#创建一个GitHub仓库" class="headerlink" title="创建一个GitHub仓库"></a>创建一个GitHub仓库</h3><p>名字必须是 <code>[你的用户名].github.io</code></p><p>如果您的账户名是limedroid,则需要创建一个<code>limedroid.github.io</code>的public仓库.</p><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="网站配置git"><a href="#网站配置git" class="headerlink" title="网站配置git"></a>网站配置git</h3><p>在网站的<code>_config.yml</code>中配置deploy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:  &lt;仓库<span class="built_in">clone</span>地址&gt; //冒号后面两个空格</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>首次使用git需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;godweiyang&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span>ssh-keygen</span><br></pre></td></tr></table></figure><p>找到C:\用户\[用户名]<code>.ssh</code>中的<code>id_rsa.pub</code></p><p>复制其中的内容到GitHub的<code>settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>new ssh key</code>-&gt;<code>key</code></p><p>title随便输入，点击<code>Add ssh key</code></p><p>这样就部署到GitHub了，gitee原理操作类似</p><h2 id="hexo的日常使用命令"><a href="#hexo的日常使用命令" class="headerlink" title="hexo的日常使用命令"></a>hexo的日常使用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g //渲染静态文件</span><br><span class="line">hexo d //部署到GitHub</span><br><span class="line">hexo g -d //渲染部署一气呵成</span><br><span class="line">hexo s //本地预览</span><br><span class="line">hexo new <span class="string">&#x27;hello&#x27;</span> //新建文章</span><br></pre></td></tr></table></figure><h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>你可以去官网<a href="https://hexo.io/themes/%E5%AF%BB%E6%89%BE%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%88%91%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%BB%E9%A2%98https://github.com/jerryc127/hexo-theme-butterfly%EF%BC%8C%E6%97%A0%E8%AE%BA%E4%BB%80%E4%B9%88%E4%B8%BB%E9%A2%98%EF%BC%8C%E9%83%BD%E6%9C%89%E7%9B%B8%E5%BA%94%E6%96%87%E6%A1%A3%E4%BE%9B%E4%BD%A0%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE">https://hexo.io/themes/寻找自己喜欢的主题，也可以使用我正在使用的主题https://github.com/jerryc127/hexo-theme-butterfly，无论什么主题，都有相应文档供你参考配置</a></p><h2 id="遇到的那些坑"><a href="#遇到的那些坑" class="headerlink" title="遇到的那些坑"></a>遇到的那些坑</h2><ul><li>如果遇到这样的报错</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709111820.png"></p><p>你可以尝试输入此代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>写文章时需要注意什么</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709111937.png"></p></li></ul><p>每个属性冒号后面要有空格</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记_深色模式</title>
      <link href="/2021/06/26/kotlin_about_3/"/>
      <url>/2021/06/26/kotlin_about_3/</url>
      
        <content type="html"><![CDATA[<h2 id="深色模式报错解决办法"><a href="#深色模式报错解决办法" class="headerlink" title="深色模式报错解决办法"></a>深色模式报错解决办法</h2><p>在style.xml中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin那些事_2</title>
      <link href="/2021/06/25/kotlin_about_2/"/>
      <url>/2021/06/25/kotlin_about_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Kotlin中-until和-的区别"><a href="#Kotlin中-until和-的区别" class="headerlink" title="Kotlin中 until和..的区别"></a>Kotlin中 until和..的区别</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;   <span class="comment">// 等价于 for (int i = 1 ; i &lt;= 5 ; i++) &#123; print(i) &#125;</span></span><br><span class="line">  print(i)  <span class="comment">// 12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>..是左右闭区间</p><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">5</span>) &#123;  <span class="comment">// 等价于 for (int i = 1 ; i &lt; 5 ; i++) &#123; print(i) &#125;</span></span><br><span class="line">  print(i) <span class="comment">// 1234</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>until是左闭右开区间</p><h2 id="小白解析json文件时，遇到的坑"><a href="#小白解析json文件时，遇到的坑" class="headerlink" title="小白解析json文件时，遇到的坑"></a>小白解析json文件时，遇到的坑</h2><p>哦，我的上帝啊，原来解析的json中不能有subjects，我懂了</p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin那些事_1</title>
      <link href="/2021/06/24/kotlin_about_1/"/>
      <url>/2021/06/24/kotlin_about_1/</url>
      
        <content type="html"><![CDATA[<h2 id="如果你想得到当前类的名字，在kotlin中你可以这么写"><a href="#如果你想得到当前类的名字，在kotlin中你可以这么写" class="headerlink" title="如果你想得到当前类的名字，在kotlin中你可以这么写"></a>如果你想得到当前类的名字，在kotlin中你可以这么写</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javaClass.simpleName</span><br></pre></td></tr></table></figure><p>那么得到当前类的名称有什么意义呢，有意义那是必然的，具体我也忘记了，，，，</p><h2 id="当你想让自己的对象为空时你可以试试这个"><a href="#当你想让自己的对象为空时你可以试试这个" class="headerlink" title="当你想让自己的对象为空时你可以试试这个?"></a>当你想让自己的对象为空时你可以试试这个<code>?</code></h2><p>这样或许可以避免一些空指针异常（我猜的</p><h2 id="当你需要类型转化时，在kotlin中你可以这么做"><a href="#当你需要类型转化时，在kotlin中你可以这么做" class="headerlink" title="当你需要类型转化时，在kotlin中你可以这么做"></a>当你需要类型转化时，在kotlin中你可以这么做</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> button = findViewById(R.id.send_button) <span class="keyword">as</span> Button</span><br></pre></td></tr></table></figure><p>当然上一篇博客博客说过了，现在没有必要findViewById，即便要用findViewById，这样写才是明智的</p><p><code>val button=findViewById&lt;Button&gt;(R.id.send_button)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin &#39;不需要findViewById&#39;特性消失问题-Android Studio</title>
      <link href="/2021/06/24/kotlin/"/>
      <url>/2021/06/24/kotlin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，在写安卓时kotlin的很多特性是非常爽的，但是就在颓废一年的我重新操起键盘敲代码时，突然发现，嗯？为什么不能直接找控件id了？特性取消了？以后还是要写繁琐的findViewById了？</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>于是我就百度了亿下，喔~原来是这样，在某个Android studio版本之后，软件就不自带kotlin的某个扩展插件了，只要我们加入这个插件就可以爽到飞天的使用kotlin了</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>就跟上文说的一样，加入插件就万事大吉喽</p><p>找到自己项目下的build.gradle，在plugins中加入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id &#x27;kotlin-android&#x27;</span><br><span class="line">id &#x27;kotlin-android-extensions&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> Android Stuidio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
