<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>text</title>
      <link href="/2024/01/23/text/"/>
      <url>/2024/01/23/text/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Android Studio 遇到的配置错误</title>
      <link href="/2022/05/04/ansroid-error/"/>
      <url>/2022/05/04/ansroid-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Android-Studio-遇到的配置错误"><a href="#关于Android-Studio-遇到的配置错误" class="headerlink" title="关于Android Studio 遇到的配置错误"></a>关于Android Studio 遇到的配置错误</h1><blockquote><p>配置AS过程中难免遇到奇奇怪怪的问题，在这里整理成册</p><p>参看：<a href="https://blog.csdn.net/qq_15345551/article/details/118726611">https://blog.csdn.net/qq_15345551/article/details/118726611</a></p><p>​          <a href="https://blog.csdn.net/fjnu_se/article/details/112064299">https://blog.csdn.net/fjnu_se/article/details/112064299</a></p></blockquote><h1 id="插件禁用导致的Android-studio无法打开"><a href="#插件禁用导致的Android-studio无法打开" class="headerlink" title="插件禁用导致的Android studio无法打开"></a>插件禁用导致的Android studio无法打开</h1><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202205042221229.png"></p><p>解决办法：</p><p>打开Android studio的路径下的<code>disabled_plugins.txt</code>文件，系统不同路径不同，百度即可</p><p>删除<code>disabled_plugins.txt</code>文件，重启Android Studio</p><h1 id="Gradle无法识别插件问题"><a href="#Gradle无法识别插件问题" class="headerlink" title="# Gradle无法识别插件问题"></a># Gradle无法识别插件问题</h1><p>解决办法：</p><p>找到<code>.gradle</code>目录下<code>gradle.properties</code>文件，注释掉代理选项</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>废旧电脑搭建Fedora服务器</title>
      <link href="/2022/04/26/server-centos/"/>
      <url>/2022/04/26/server-centos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="废旧电脑基于Fedora，ipv6ddns的服务器搭建过程"><a href="#废旧电脑基于Fedora，ipv6ddns的服务器搭建过程" class="headerlink" title="废旧电脑基于Fedora，ipv6ddns的服务器搭建过程"></a>废旧电脑基于Fedora，ipv6ddns的服务器搭建过程</h1><blockquote><p>因为家里有个废弃电脑，还想到现在人手公网IPv6，外加每年购买服务器的费用，我打算自己搭建个本地物理服务器</p><p>参考：<a href="https://www.dandelioncloud.cn/article/details/1496903761879732226">永不休眠</a></p><p>​          <a href="https://www.cnblogs.com/larry-luo/p/14276014.html">查看硬盘分区</a></p><p>​          <a href="https://blog.csdn.net/weixin_41489136/article/details/123299344">磁盘扩展</a></p></blockquote><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><ul><li>系统盘的制作，去官网下载系统，将<code>iso</code>文件写入u盘，这里推荐工具<code>balenaEtcher</code></li><li>开机根据自己电脑的型号进入启动项选择界面，笔者这边是<code>f12</code>，选择u盘启动，进行安装</li><li>跟着系统流程进行安装，设置root账号，勾选允许ssh登陆</li></ul><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><ul><li><p>作为服务器，需要设置物理机永不休眠</p><p>配置logind.conf ，一般在<code>/etc/systemd/</code>目录下，找到<code>HandleLidSwitch</code>，去掉注释并修改为<code>HandleLidSwitch=lock</code></p><p>运行<code>systemctl restart systemd-logind</code>重载配置文件</p></li><li><p>磁盘扩展卷</p><p>使用命令<code>df-h</code>查看卷名</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204262034854.png"></p><p>可以看到根目录所在卷，使用命令<code>lvextend -l +100%free /dev/mapper/fedora_locahost-root</code>扩展卷到最大，</p><p>最后执行<code>xfs_growfs /dev/mapper/fedora_locahost-root</code>完成扩展</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi OS系统更新导致默认用户pi无法登陆</title>
      <link href="/2022/04/18/raspberry-user-pi/"/>
      <url>/2022/04/18/raspberry-user-pi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Raspberry-Pi-OS系统更新，默认用户无法使用的问题"><a href="#关于Raspberry-Pi-OS系统更新，默认用户无法使用的问题" class="headerlink" title="关于Raspberry Pi OS系统更新，默认用户无法使用的问题"></a>关于Raspberry Pi OS系统更新，默认用户无法使用的问题</h1><blockquote><p>今天第一次玩树莓派，跟着官网操作，可是最后发现，默认账号pi显示密码错误，经过我一番查询，我发现树莓派4月4的一次更新删除了默认用户pi。对于没有屏幕的用户来说无疑是非常难受的。</p><p>官方教程：<a href="https://www.raspberrypi.com/documentation/computers/getting-started.html">https://www.raspberrypi.com/documentation/computers/getting-started.html</a></p><p>系统更新日志：<a href="https://downloads.raspberrypi.org/raspios_arm64/release_notes.txt">https://downloads.raspberrypi.org/raspios_arm64/release_notes.txt</a></p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在官网自己的烧录软件Raspberry Pi Imager上，点击右下角的小齿轮就可以自定义账号以及各种设置</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204181534308.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在本地服务器做动态域名解析DDNS</title>
      <link href="/2022/04/15/ddns/"/>
      <url>/2022/04/15/ddns/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考：<a href="https://github.com/jeessy2/ddns-go#%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8">https://github.com/jeessy2/ddns-go#系统中使用</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ddns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用matplotlib plt时出现的问题</title>
      <link href="/2022/04/15/matplotlib-plt-issue/"/>
      <url>/2022/04/15/matplotlib-plt-issue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在使用matplotlib-plt时出现的问题"><a href="#在使用matplotlib-plt时出现的问题" class="headerlink" title="在使用matplotlib plt时出现的问题"></a>在使用matplotlib plt时出现的问题</h1><blockquote><p>参考：<a href="https://blog.csdn.net/dafu_dafu/article/details/119239639">https://blog.csdn.net/dafu_dafu/article/details/119239639</a></p><p>​            <a href="https://www.csdn.net/tags/NtjaUg5sMzQyODYtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/NtjaUg5sMzQyODYtYmxvZwO0O0OO0O0O.html</a></p></blockquote><h2 id="颜色显示诡异"><a href="#颜色显示诡异" class="headerlink" title="颜色显示诡异"></a>颜色显示诡异</h2><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204151728960.png"></p><p>键入以下代码即可解决</p><p><code>img2 = cv.cvtColor(img, cv.COLOR_BGR2RGB)</code></p><p>![image-20220415172924855](/Users/heboxuan/Library/Application Support/typora-user-images/image-20220415172924855.png)</p><h2 id="中文不显示（mac解决办法，win可能也适用）"><a href="#中文不显示（mac解决办法，win可能也适用）" class="headerlink" title="中文不显示（mac解决办法，win可能也适用）"></a>中文不显示（mac解决办法，win可能也适用）</h2><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>Python常用中文字体</p><table><thead><tr><th>名称</th><th>字体</th></tr></thead><tbody><tr><td>黑体</td><td>SimHei</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td></tr><tr><td>微软正黑体</td><td>Microsoft JhengHei</td></tr></tbody></table></li><li><p>使用python查看字体所在位置matplotlib</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> font <span class="keyword">in</span> font_manager.fontManager.ttflist:</span><br><span class="line">    <span class="comment"># 查看字体名以及对应的字体文件名</span></span><br><span class="line">    <span class="built_in">print</span>(font.name, <span class="string">&#x27;-&#x27;</span>, font.fname)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204151735926.png"></p><blockquote><p>这个matplotlib下的ttf文件夹就是字体所在文件夹</p></blockquote></li><li><p>下载字体<code>Simhei.ttf</code></p><p>自行百度下载，将<code>Simhei.ttf</code>放到上述ttf文件夹下</p></li></ul><h4 id="修改matplotlibrc"><a href="#修改matplotlibrc" class="headerlink" title="修改matplotlibrc"></a>修改<code>matplotlibrc</code></h4><p>matplotlibrc在matplotlib/mpl-data目录下，对matplotlibrc文件进行修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">249</span>行左右，去掉注释</span><br><span class="line">font.family:  sans-serif     </span><br><span class="line"></span><br><span class="line"># <span class="number">257</span>行左右，同样去掉注释，并添加Simhei字体,根据自己实际字体进行添加</span><br><span class="line">font.sans-serif: Simhei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif       </span><br><span class="line"></span><br><span class="line"># <span class="number">400</span>行左右，去掉注释，并修改值为False</span><br><span class="line">axes.unicode_minus: False  # use Unicode for the minus symbol rather than hyphen.  See</span><br><span class="line">                           # https:<span class="comment">//en.wikipedia.org/wiki/Plus_and_minus_signs#Character_codes   </span></span><br></pre></td></tr></table></figure><h4 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h4><p>使用python查看缓存路径，删除缓存文件，重启编辑器，即可解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="built_in">print</span>(matplotlib.get_cachedir())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204151744647.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> python </tag>
            
            <tag> plr </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActivityResultApi</title>
      <link href="/2022/04/13/activity-result-api/"/>
      <url>/2022/04/13/activity-result-api/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="替代startActivityForResult的官方解决方案–ActivityResultAPI"><a href="#替代startActivityForResult的官方解决方案–ActivityResultAPI" class="headerlink" title="替代startActivityForResult的官方解决方案–ActivityResultAPI"></a>替代startActivityForResult的官方解决方案–ActivityResultAPI</h1><blockquote><p>当我接触到startActivityForResult的时候，我发现它已经被官方弃用了，我在官方看到这样的一句话</p><p>虽然所有API级别的<code>Activity</code>类均提供底层 [startActivityForResult()](<a href="https://developer.android.com/reference/android/app/Activity#startActivityForResult">https://developer.android.com/reference/android/app/Activity#startActivityForResult</a>(android.content.Intent, int))和 [<code>onActivityResult()</code>](<a href="https://developer.android.com/reference/android/app/Activity#onActivityResult">https://developer.android.com/reference/android/app/Activity#onActivityResult</a>(int, int, android.content.Intent)) API，但我们强烈建议您使用 AndroidX <a href="https://developer.android.com/jetpack/androidx/releases/activity">Activity</a> 和 <a href="https://developer.android.com/jetpack/androidx/releases/fragment">Fragment</a> 中引入的<code>Activity Result API</code></p><p>这也就说明官方是希望我们使用<code>Activity Result API</code>进行开发的</p><p>参考：<a href="https://segmentfault.com/a/1190000037601888">https://segmentfault.com/a/1190000037601888</a></p><p>官方文档：<a href="https://developer.android.com/training/basics/intents/result">https://developer.android.com/training/basics/intents/result</a></p></blockquote><h2 id="针对actibity注册回调"><a href="#针对actibity注册回调" class="headerlink" title="针对actibity注册回调"></a>针对actibity注册回调</h2><p>位于 <a href="https://developer.android.com/reference/androidx/activity/ComponentActivity"><code>ComponentActivity</code></a> 或 <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment"><code>Fragment</code></a> 中时，Activity Result API 会提供 [registerForActivityResult()](<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultCaller#registerForActivityResult">https://developer.android.com/reference/androidx/activity/result/ActivityResultCaller#registerForActivityResult</a>(androidx.activity.result.contract.ActivityResultContract, androidx.activity.result.ActivityResultCallback)) API，用于注册结果回调。<code>registerForActivityResult()</code> 接受 <a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContract"><code>ActivityResultContract</code></a> 和 <a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultCallback"><code>ActivityResultCallback</code></a> 作为参数，并返回 <a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultLauncher"><code>ActivityResultLauncher</code></a>，供您用来启动另一个 activity。</p><p><code>ActivityResultContract</code> 定义生成结果所需的输入类型以及结果的输出类型。这些 API 可为拍照和请求权限等基本 intent 操作提供<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts">默认协定</a>。您还可以<a href="https://developer.android.com/training/basics/intents/result#custom">创建自己的自定义协定</a>。</p><p><code>ActivityResultCallback</code> 是单一方法接口，带有 <a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultCallback#onActivityResult(O)"><code>onActivityResult()</code></a> 方法，可接受 <code>ActivityResultContract</code> 中定义的输出类型的对象：</p><blockquote><p>可能一些人觉得这是官网照搬下来的，没有什么意义，可是事实上我只理解这三段话，我觉得够用了，不过以后还会继续深入。那么就让我现在来给讲一下这三段话的意思</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个启动者ActivityResultLauncher是必要的</span></span><br><span class="line">   <span class="keyword">private</span> ActivityResultLauncher activityResultLauncher = </span><br><span class="line">       <span class="comment">//给ActivityResultLauncher进行注册，此时registerForActivityResult会接受两个参数ActivityResultContract和ctivityResultCallback,代码中的IO为当前活动传入的数据类型和第二活动传出的输出数据类型</span></span><br><span class="line">     registerForActivityResult(<span class="keyword">new</span> ActivityResultContract&lt;I, O&gt;() &#123;</span><br><span class="line">       <span class="meta">@NonNull</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Intent <span class="title">createIntent</span><span class="params">(<span class="meta">@NonNull</span> Context context, I input)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//在这个方法中，去创建intent以启动第二活动，当然也可以.putExtra(&quot;key&quot;, input)，这里给了input参数，即需要传入的数据,input可以在调用activityResultLauncher.lsunch()时给input赋值</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, Activity2.class);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> O <span class="title">parseResult</span><span class="params">(<span class="keyword">int</span> resultCode, <span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//在这个方法中，它会帮你得到传回的intent，然后可以使用它去解析数据</span></span><br><span class="line">           O s = intent.getStringExtra(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; s != <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">return</span> s;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;, <span class="keyword">new</span> ActivityResultCallback&lt;O&gt;() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(O result)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//这个方法是当第二活动销毁时，数据回调了，需要做什么动作，这里的result由系统自动调用parseResult方法得到</span></span><br><span class="line">           editText.setText(result);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>好，那怎么真正的去使用它呢，只需要在主活动方法中使用<code>activityResultLauncher.launch(null);</code>如果不进行传入数据，则为null</p><p>那么如果需要传入数据，怎么在第二活动得到这个数据呢，<code>getIntent().getStringExtra(&quot;key&quot;);</code>去得到传入的数据</p><p>如果需要传回数据，则可以<code>getIntent().putExtra(&quot;key&quot;, &quot;value&quot;);</code>此时需要设置返回代码以及intent，<code>setResult(Activity.RESULT_OK, getIntent());</code></p><p>至此就可以简单的使用Activity Result API了，当然他不局限于在内部活动传递字符串等数据，就行官网所说</p><p>您的应用可启动相机应用并接收拍摄的照片作为结果。或者，您可以启动“通讯录”应用以便用户选择联系人，并且您将接收联系人详细信息作为结果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ExpandableList解决方案</title>
      <link href="/2022/04/12/android-expand-list/"/>
      <url>/2022/04/12/android-expand-list/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ExpandableListView——ExpandableListActivity及其重写方法被弃用的替代方案"><a href="#ExpandableListView——ExpandableListActivity及其重写方法被弃用的替代方案" class="headerlink" title="ExpandableListView——ExpandableListActivity及其重写方法被弃用的替代方案"></a>ExpandableListView——ExpandableListActivity及其重写方法被弃用的替代方案</h1><blockquote><p>今天老师上课讲到<code>ExpandableListActivity</code>的应用，但是当我们实际使用的时候，会发现它的重写方法几乎全部被弃用，其实官方也给出了相应的替代方案</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204121346516.png"></p><p>既然是学习，那我们就使用推荐替代方案中的<code>ExpandableListView</code></p><p>ExpandableListView官方文档：<a href="https://developer.android.com/reference/android/widget/ExpandableListView">https://developer.android.com/reference/android/widget/ExpandableListView</a></p></blockquote><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>使用<code>ExpandableListView</code>布局即可，关于item，自行书写，当然官方也给出了一级视图<code>android.R.layout.simple_expandable_list_item_1</code>，二级视图<code>android.R.layout.simple_expandable_list_item_2</code>，点开它，可以看到textView的id为<code>text1</code>与<code>text2</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ExpandableListView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;*****&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/*****&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ExpandableListView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h2><ul><li><p><strong>数据源</strong></p><p>需要有一级二级目录，所以定义两个数组，或者<code>arrayList</code>,<code>map</code>等，无可厚非，这里我就用最偷懒的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  String [] provinces = &#123;<span class="string">&quot;山西省&quot;</span>,<span class="string">&quot;吉林省&quot;</span>,<span class="string">&quot;河北省&quot;</span>,<span class="string">&quot;山东省&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> String[][] cities = &#123;&#123;<span class="string">&quot;太原市&quot;</span>,<span class="string">&quot;吕梁市&quot;</span>,<span class="string">&quot;长治市&quot;</span>&#125;,&#123;<span class="string">&quot;长春市&quot;</span>,<span class="string">&quot;松原市&quot;</span>,<span class="string">&quot;吉林市&quot;</span>&#125;,&#123;<span class="string">&quot;石家庄市&quot;</span>,<span class="string">&quot;唐山市&quot;</span>,<span class="string">&quot;承德市&quot;</span>&#125;,&#123;<span class="string">&quot;菏泽市&quot;</span>,<span class="string">&quot;青岛市&quot;</span>,<span class="string">&quot;济南市&quot;</span>&#125;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义适配器</strong></p><p>和<code>listView</code>，<code>recycleView</code>一样，既然是列表布局，那么必然是需要适配器的，自己的适配器类继承<code>BaseExpandableListAdapter</code>类，<code>android Studio</code>会自动生成需要重写的方法，<u><strong>此方法与老师想讲的<code>ExpandableListActivity</code>重写方法一致</strong></u>，起到学习作用</p><blockquote><p>大多数重写方法相信都是会的，方法名和参数很容易理解和书写，这里需要注意的是<code>getChildView</code>和<code>getGroupView</code>这两个方法，其实与<code>listView</code>，<code>recycleView</code>一样写法一致，先进行<code>view</code>的<code>LayoutInflater</code>，再添加相应的数据，最后返回<code>view</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> provinces.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChildrenCount</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cities[groupPosition].length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getGroup</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> provinces[groupPosition];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cities[groupPosition][childPosition];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getGroupId</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> groupPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getChildId</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> childPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasStableIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getGroupView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">boolean</span> isExpanded, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">  convertView = LayoutInflater.from(parent.getContext()).inflate(android.R.layout.simple_expandable_list_item_1, <span class="keyword">null</span>);</span><br><span class="line">  TextView textView = convertView.findViewById(android.R.id.text1);</span><br><span class="line">  textView.setText(provinces[groupPosition]);</span><br><span class="line">  <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getChildView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition, <span class="keyword">boolean</span> isLastChild, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">  convertView = LayoutInflater.from(parent.getContext()).inflate(R.layout.text_item, <span class="keyword">null</span>);</span><br><span class="line">  TextView textView = convertView.findViewById(R.id.text2);</span><br><span class="line">  textView.setText(cities[groupPosition][childPosition]);</span><br><span class="line">  <span class="keyword">return</span> convertView;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChildSelectable</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>活动类</strong></p><p>在活动类中对<code>ExpandListView</code>进行<code>findViewId</code>，再绑定适配器即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExpandableListView expandableListView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">expandableListView = findViewById(R.id.expand_list);</span><br><span class="line">expandableListView.setAdapter(myExpandListAdapter);</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/202204121411974.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> expandList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos学习日记_1</title>
      <link href="/2022/04/07/centos-learn-1/"/>
      <url>/2022/04/07/centos-learn-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="centos命令行学习日记1"><a href="#centos命令行学习日记1" class="headerlink" title="centos命令行学习日记1"></a>centos命令行学习日记1</h1><table><thead><tr><th>lsblk</th><th>查看分区和硬盘</th></tr></thead><tbody><tr><td>df -h</td><td>查看空间使用情况</td></tr><tr><td>su</td><td>切换用户</td></tr><tr><td>systemctl status</td><td>状态查询命令</td></tr><tr><td>firewall-cmd --zone=public --list-ports</td><td>防火墙开放端口查询</td></tr><tr><td>firewall-cmd --zone=public --remove-port=5672/tcp --permanent</td><td>防火墙关闭端口</td></tr><tr><td>firewall-cmd --zone=public --add-port=5900-5905/tcp --permanent</td><td>防火墙打开端口</td></tr><tr><td>firewall-cmd --reload</td><td>防火墙配置生效</td></tr><tr><td>lsof -i:端口号</td><td>查看端口</td></tr><tr><td>kill -9 PID</td><td>关闭进程</td></tr><tr><td>find / -name 文件名</td><td>全盘查找文件</td></tr><tr><td>ip add</td><td>查看网口及其ip地址</td></tr><tr><td>yum search 名字</td><td>查看软件库软件</td></tr><tr><td>mv 旧文件名 新文件名</td><td>重命名</td></tr><tr><td>chmod</td><td>提权</td></tr><tr><td>systemctl enable &lt;服务名&gt;</td><td>设置开机自启</td></tr><tr><td>systemctl disable &lt;服务名&gt;</td><td>禁止开机自启</td></tr><tr><td>systemctl list-unit-files</td><td>查看所有服务状态</td></tr><tr><td>systemctl list-unit-files |</td><td>查看服务自启状态</td></tr><tr><td>| grep &lt;服务名&gt;</td><td>过滤器</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于git的hexo多服务端部署-GitHub-服务器</title>
      <link href="/2022/04/02/Multi-terminal-deployment/"/>
      <url>/2022/04/02/Multi-terminal-deployment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于git的hexo多服务端部署-GitHub-服务器"><a href="#基于git的hexo多服务端部署-GitHub-服务器" class="headerlink" title="基于git的hexo多服务端部署-GitHub-服务器"></a>基于git的hexo多服务端部署-GitHub-服务器</h1><blockquote><p>思路：GitHub的部署就不多赘述，相信大家都是会的，那么我们如果在服务器建立一个git仓的话，类比GitHub仓我们就可以通过hexo命令进行双端的同时部署。</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1632020?from=15425">https://cloud.tencent.com/developer/article/1632020?from=15425</a></p></blockquote><h2 id="git的安装及配置"><a href="#git的安装及配置" class="headerlink" title="git的安装及配置"></a>git的安装及配置</h2><p><strong>略</strong></p><blockquote><p>相信这个不用赘述了</p></blockquote><h2 id="服务器的git仓建立"><a href="#服务器的git仓建立" class="headerlink" title="服务器的git仓建立"></a>服务器的git仓建立</h2><ul><li><p>首先需要一个仓库文件夹<code>mkdir blog</code></p></li><li><p>在<code>blog</code>文件夹下初始化位裸露的git仓库<code>git init --bare blog.git</code></p></li><li><p>创建hook函数</p><ul><li><p>进入hook文件夹<code>cd blog.git/hooks</code></p></li><li><p>新建脚本<code>vi post-receive</code></p></li><li><p>编辑以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=***/blog --git-dir=***/blog.git checkout -f</span><br></pre></td></tr></table></figure></li><li><p>脚本提权<code>chmod +x post-receive</code></p></li></ul></li></ul><h2 id="创建ssh"><a href="#创建ssh" class="headerlink" title="创建ssh"></a>创建ssh</h2><ul><li><p>在服务器的<code>~/.ssh/authorized_keys</code>中添加自己电脑的公钥</p></li><li><p>自己电脑执行指令<code>ssh-copy-id -i ***/.ssh/id_rsa.pub root@服务器ip</code></p></li><li><p>测试连接<code>ssh root@服务器ip</code>,不需要输入密码连接成功即为配置成功</p></li></ul><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><ul><li><p>安装略</p></li><li><p><code>find / -name nginx.conf</code>找到nginx配置文件，进行编辑</p><ul><li><p><code>user</code>更改为<code>root</code></p></li><li><p><code>server_name</code>更改为自己的域名，或者不更改</p></li><li><p><code>root</code>更改为的<code>blog</code>的位置</p></li></ul></li><li><p>重载nginx配置<code>nginx -s reload</code></p></li></ul><h2 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h2><ul><li><p>打开根目录下的<code>_config.yml</code></p><ul><li><p><code>deploy</code>部分按照以下方式书写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:自己的github仓库</span></span><br><span class="line">    <span class="attr">Alibaba:</span> <span class="string">root@服务器ip:***/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>至此执行<code>hexo d</code>可进行多服务端部署</p><blockquote><p>难免写错，欢迎指出问题</p><p>qq：980987346</p><p>邮箱：<a href="mailto:&#57;&#x38;&#48;&#x39;&#x38;&#x37;&#51;&#52;&#54;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#57;&#x38;&#48;&#x39;&#x38;&#x37;&#51;&#52;&#54;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> clog </tag>
            
            <tag> 博客，多服务端部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parallel为虚拟机设置代理 ubuntu</title>
      <link href="/2021/12/28/parallel_proxy/"/>
      <url>/2021/12/28/parallel_proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="如何快速为parallel设置宿主机代理"><a href="#如何快速为parallel设置宿主机代理" class="headerlink" title="如何快速为parallel设置宿主机代理"></a>如何快速为parallel设置宿主机代理</h1><h3 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h3><p>在mac上在终端键入<code>ifconfig</code>查看联网ip地址</p><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><p>在代理软件上开启<code>允许局域网连接</code>，查看<code>端口号</code></p><h3 id="parallel设置"><a href="#parallel设置" class="headerlink" title="parallel设置"></a>parallel设置</h3><p>在虚拟机上<code>网络设置</code>为<code>桥接网络</code>，并且在系统内设置代理</p><p><code>ip地址</code>为<code>宿主机ip</code>，<code>端口号</code>为<code>宿主机代理软件端口号</code></p><p>至此完成</p><blockquote><p>注意：宿主机ip可能变化，修改系统代理中的宿主机ip即可</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> parallel </tag>
            
            <tag> proxy </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题-最小路径和</title>
      <link href="/2021/09/19/minPathSum/"/>
      <url>/2021/09/19/minPathSum/</url>
      
        <content type="html"><![CDATA[<h1 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a><a href="https://leetcode-cn.com/problems/minimum-path-sum/">最小路径和</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"></p><blockquote><p>输入：grid = [[1,3,1],[1,5,1],[4,2,1]]<br>输出：7<br>解释：因为路径 1→3→1→1→1 的总和最小。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：grid = [[1,2,3],[4,5,6]]<br>输出：12</p></blockquote><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>动态规划</strong></p><p>dp表存储每一步的运算结算，可知每一步之前只有两个状态，上和左走过来，通过状态转移方程，判断哪条路径最短，dp表最后的值就是所求结果</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="comment">//边界情况</span></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j != <span class="number">0</span>) dp[i][j] = dp[i][j-<span class="number">1</span>] + grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) dp[i][j] = dp[i-<span class="number">1</span>][j] + grid[i][j];</span><br><span class="line">                <span class="comment">//状态转移方程</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j != <span class="number">0</span>) dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) +grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[grid.length-<span class="number">1</span>][grid[<span class="number">0</span>].length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径总和III</title>
      <link href="/2021/09/18/pathSumIII/"/>
      <url>/2021/09/18/pathSumIII/</url>
      
        <content type="html"><![CDATA[<h1 id="路径总和-III"><a href="#路径总和-III" class="headerlink" title=" 路径总和 III"></a><a href="https://leetcode-cn.com/problems/path-sum-iii/"> 路径总和 III</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树的根节点 root ，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。</p><p>路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><p><strong>示例1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg"></p><blockquote><p>输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8<br>输出：3<br>解释：和等于 8 的路径有 3 条，如图所示。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22<br>输出：3</p></blockquote><p><strong>提示:</strong></p><ul><li>二叉树的节点个数的范围是 <code>[0,1000]</code></li><li><code>-109 &lt;= Node.val &lt;= 109</code> </li><li><code>-1000 &lt;= targetSum &lt;= 1000</code> </li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>深度优先搜索</strong></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> myPathSum(root, targetSum, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1500</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum, <span class="keyword">int</span>[] path, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">        path[level] = root.val;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sum += path[i];</span><br><span class="line">            <span class="keyword">if</span> (sum == targetSum)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ans += myPathSum(root.left, targetSum, path, level+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ans += myPathSum(root.right, targetSum, path, level+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题-最大正方形</title>
      <link href="/2021/09/16/maximalSquare/"/>
      <url>/2021/09/16/maximalSquare/</url>
      
        <content type="html"><![CDATA[<h1 id="最大正方形"><a href="#最大正方形" class="headerlink" title="最大正方形"></a><a href="https://leetcode-cn.com/problems/maximal-square/">最大正方形</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个由 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成的二维矩阵内，找到只包含 <code>&#39;1&#39;</code> 的最大正方形，并返回其面积。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"></p><blockquote><p>输入：matrix = [[“1”,”0”,”1”,”0”,”0”],[“1”,”0”,”1”,”1”,”1”],[“1”,”1”,”1”,”1”,”1”],[“1”,”0”,”0”,”1”,”0”]]<br>输出：4</p></blockquote><p><strong>示例2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg"></p><blockquote><p>输入：matrix = [[“0”,”1”],[“1”,”0”]]<br>输出：1</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：matrix = [[“0”]]<br>输出：0</p></blockquote><p>提示：</p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>matrix[i][j]</code> 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><h2 id="理解-amp-想法"><a href="#理解-amp-想法" class="headerlink" title="理解&amp;想法"></a>理解&amp;想法</h2><p>待定</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=matrix.length,m=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][]dp=<span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">                        dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                        ans=Math.max(ans,dp[i][j]);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[i][j]=Math.min(Math.min(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]),dp[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    ans=Math.max(ans,dp[i][j]*dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题-太平洋大西洋水流问题</title>
      <link href="/2021/09/16/pacificAtlantic/"/>
      <url>/2021/09/16/pacificAtlantic/</url>
      
        <content type="html"><![CDATA[<h1 id="太平洋大西洋水流问题"><a href="#太平洋大西洋水流问题" class="headerlink" title="太平洋大西洋水流问题"></a><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/">太平洋大西洋水流问题</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p><p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p><p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。</p><p>提示：</p><p>输出坐标的顺序不重要<br>m 和 n 都小于150</p><p>示例：</p><blockquote><p>给定下面的 5x5 矩阵:</p><p>  太平洋 ~   ~   ~   ~   ~<br>       ~  1   2   2   3  (5) *<br>       ~  3   2   3  (4) (4) *<br>       ~  2   4  (5)  3   1  *<br>       ~ (6) (7)  1   4   5  *<br>       ~ (5)  1   1   2   4  *<br>          *   *   *   *   * 大西洋</p><p>返回:</p><p>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).</p></blockquote><h2 id="理解-amp-想法"><a href="#理解-amp-想法" class="headerlink" title="理解&amp;想法"></a>理解&amp;想法</h2><p>待定</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[][] dires = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> m, n;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[][] heights;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(<span class="keyword">int</span>[][] heights) &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            m = heights.length;</span><br><span class="line">            <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            n = heights[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            <span class="keyword">this</span>.heights = heights;</span><br><span class="line">            <span class="keyword">boolean</span>[][] canReachP = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">            <span class="keyword">boolean</span>[][] canReachA = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                dfs(<span class="number">0</span>, i, canReachP);</span><br><span class="line">                dfs(m - <span class="number">1</span>, i, canReachA);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                dfs(i, <span class="number">0</span>, canReachP);</span><br><span class="line">                dfs(i, n - <span class="number">1</span>, canReachA);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(canReachA[i][j] &amp;&amp; canReachP[i][j])&#123;</span><br><span class="line">                        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        temp.add(i);</span><br><span class="line">                        temp.add(j);</span><br><span class="line">                        res.add(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">boolean</span>[][] canReach)</span> </span>&#123;</span><br><span class="line">            canReach[x][y] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> newX = x + dires[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = y + dires[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (isIn(newX, newY) &amp;&amp; heights[x][y] &lt;= heights[newX][newY] &amp;&amp; !canReach[newX][newY]) &#123;</span><br><span class="line">                    dfs(newX, newY, canReach);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题-二叉树中序遍历</title>
      <link href="/2021/09/16/inorderTraversal/"/>
      <url>/2021/09/16/inorderTraversal/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树中序遍历"><a href="#二叉树中序遍历" class="headerlink" title="二叉树中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">二叉树中序遍历</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"></p><blockquote><p>输入：root = [1,null,2,3]<br>输出：[1,3,2]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：root = []<br>输出：[]</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：root = [1]<br>输出：[1]</p></blockquote><p><strong>示例4：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg"></p><blockquote><p>输入：root = [1,2]<br>输出：[2,1]</p></blockquote><p><strong>示例5：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg"></p><blockquote><p>输入：root = [1,null,2]<br>输出：[1,2]</p></blockquote><p><strong>提示：</strong></p><ul><li><p>树中节点数目在范围 <code>[0, 100]</code> 内</p></li><li><p><code>-100 &lt;= Node.val &lt;= 100</code></p></li></ul><h2 id="理解-amp-想法"><a href="#理解-amp-想法" class="headerlink" title="理解&amp;想法"></a>理解&amp;想法</h2><p><strong>二叉树中序遍历</strong><br>简单的二叉树中序遍历，根在中间的遍历结果</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class="line">        if (root != null) &#123;</span><br><span class="line">            inorderTraversal(root.left);</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            inorderTraversal(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//树结构类</span><br><span class="line">public class TreeNode &#123;</span><br><span class="line">     int val;</span><br><span class="line">     TreeNode left;</span><br><span class="line">     TreeNode right;</span><br><span class="line">     TreeNode() &#123;&#125;</span><br><span class="line">     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="line">     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">         this.val = val;</span><br><span class="line">         this.left = left;</span><br><span class="line">         this.right = right;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题—爬楼梯</title>
      <link href="/2021/09/15/climbStairs/"/>
      <url>/2021/09/15/climbStairs/</url>
      
        <content type="html"><![CDATA[<h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">爬楼梯</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><blockquote><p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p><ol><li> 1 阶 + 1 阶</li><li> 2 阶</li></ol></blockquote><p>示例 2：</p><blockquote><p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p><ol><li> 1 阶 + 1 阶 + 1 阶</li><li> 1 阶 + 2 阶</li><li> 2 阶 + 1 阶</li></ol></blockquote><h2 id="理解-amp-想法"><a href="#理解-amp-想法" class="headerlink" title="理解&amp;想法"></a>理解&amp;想法</h2><p><strong>斐波那契数列</strong><br>看到这道题时，我是懵的，但是当我计算前几个数字时，我发现他是一个斐波那契数列，既然是个简单难度的题目，我就不深究了，end</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] stair = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题-罗马数字转阿拉伯数字</title>
      <link href="/2021/09/15/romanToInt/"/>
      <url>/2021/09/15/romanToInt/</url>
      
        <content type="html"><![CDATA[<h1 id="算法题-罗马数字转阿拉伯数字"><a href="#算法题-罗马数字转阿拉伯数字" class="headerlink" title="算法题-罗马数字转阿拉伯数字"></a>算法题-罗马数字转阿拉伯数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/roman-to-integer/">题目描述</a></h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。 </p><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>I</td><td>1</td></tr><tr><td>V</td><td>5</td></tr><tr><td>X</td><td>10</td></tr><tr><td>L</td><td>50</td></tr><tr><td>C</td><td>100</td></tr><tr><td>D</td><td>500</td></tr><tr><td>M</td><td>1000</td></tr></tbody></table><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>示例 1:</p><blockquote><p>输入: “III”<br>输出: 3</p></blockquote><p>示例 2:</p><blockquote><p>输入: “IV”<br>输出: 4</p></blockquote><p>示例 3:</p><blockquote><p>输入: “IX”<br>输出: 9</p></blockquote><p>示例 4:</p><blockquote><p>输入: “LVIII”<br>输出: 58</p><p>解释: L = 50, V= 5, III = 3.</p></blockquote><p>示例 5:</p><blockquote><p>输入: “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p></blockquote><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 罗马数字 -Mathematics</li></ul><h2 id="理解-amp-想法"><a href="#理解-amp-想法" class="headerlink" title="理解&amp;想法"></a>理解&amp;想法</h2><p><strong>哈希表</strong></p><p>看到键值对应的关系，我就想到了应用哈希表，将键值一一对应，遍历字符串，取出相对应的数字，根据罗马数字的运算法则，做一个简单的判断，将各部分相加减，即可解题</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> value = map.get(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; value &lt; map.get(s.charAt(i+<span class="number">1</span>))) &#123;</span><br><span class="line">                ans -= value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考核 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于java连接mysql8需要注意的事</title>
      <link href="/2021/07/12/link-mysql/"/>
      <url>/2021/07/12/link-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="关于java连接mysql8需要注意的事"><a href="#关于java连接mysql8需要注意的事" class="headerlink" title="关于java连接mysql8需要注意的事"></a>关于java连接mysql8需要注意的事</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//// MySQL 8.0 以下版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line"><span class="comment">//        static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;</span></span><br><span class="line"><span class="comment">//        static final String DB_URL = &quot;jdbc:mysql://[ip]:[port]/[库]&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line">        <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://[ip]:[port]/[库]?serverTimezone=GMT&amp;characterEncoding=UTF-8&amp;useSSL=false&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java项目www.fhadmin.org</span></span><br><span class="line">        <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">        <span class="keyword">final</span> String USER = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String PASS = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line">            System.out.println(<span class="string">&quot;驱动加载成功！&quot;</span>);</span><br><span class="line"><span class="comment">//            Log.d(&quot;TAG&quot;, &quot;linkMysql: qudong&quot;);</span></span><br><span class="line"><span class="comment">//            Log.d(&quot;TAG&quot;, DriverManager.getConnection(url, user, pwd).toString());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//            Log.d(&quot;TAG&quot;, &quot;linkMysql: 失败1&quot;);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接数据库成功！&quot;</span>);</span><br><span class="line"><span class="comment">//            Log.d(&quot;TAG&quot;, &quot;linkMysql: 连接数据库成功&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//            Log.d(&quot;TAG&quot;, &quot;linkMysql: 失败2&quot;);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            Connection conn = <span class="keyword">null</span>;</span><br><span class="line">            Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">                Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 打开链接</span></span><br><span class="line">                System.out.println(<span class="string">&quot;连接数据库...&quot;</span>);</span><br><span class="line">                conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line">                conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;连接数据库成功&quot;</span>);</span><br><span class="line">                stmt = conn.createStatement();</span><br><span class="line">                String sql;</span><br><span class="line">                sql = <span class="string">&quot;drop table hehe&quot;</span>;</span><br><span class="line">                <span class="keyword">int</span> i=stmt.executeUpdate(sql);</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行查询</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot; 实例化Statement对象...&quot;);</span></span><br><span class="line"><span class="comment">//                stmt = conn.createStatement();</span></span><br><span class="line"><span class="comment">//                String sql;</span></span><br><span class="line"><span class="comment">//                sql = &quot;SELECT id, name, url FROM websites&quot;;</span></span><br><span class="line"><span class="comment">//                ResultSet rs = stmt.executeQuery(sql);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 展开结果集数据库</span></span><br><span class="line"><span class="comment">//                while(rs.next())&#123;</span></span><br><span class="line"><span class="comment">//                    // 通过字段检索</span></span><br><span class="line"><span class="comment">//                    int id  = rs.getInt(&quot;id&quot;);</span></span><br><span class="line"><span class="comment">//                    String name = rs.getString(&quot;name&quot;);</span></span><br><span class="line"><span class="comment">//                    String url = rs.getString(&quot;url&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    // 输出数据</span></span><br><span class="line"><span class="comment">//                    System.out.print(&quot;ID: &quot; + id);</span></span><br><span class="line"><span class="comment">//                    System.out.print(&quot;, 站点名称: &quot; + name);</span></span><br><span class="line"><span class="comment">//                    System.out.print(&quot;, 站点 URL: &quot; + url);</span></span><br><span class="line"><span class="comment">//                    System.out.print(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">// 完成后关闭</span></span><br><span class="line"><span class="comment">//                rs.close();</span></span><br><span class="line">                stmt.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="comment">// 关闭资源</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">                &#125;<span class="comment">// 什么都不做</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(conn!=<span class="keyword">null</span>) conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                    se.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>androidStudio报错框乱码问题</title>
      <link href="/2021/07/10/androidStudio_messy_code/"/>
      <url>/2021/07/10/androidStudio_messy_code/</url>
      
        <content type="html"><![CDATA[<h1 id="androidStudio报错框乱码问题"><a href="#androidStudio报错框乱码问题" class="headerlink" title="androidStudio报错框乱码问题"></a>androidStudio报错框乱码问题</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天写app时发现build界面报错乱码了，英文还能看，可是乱码我就不知到该如何报错了，网上找到那些修改setting中utf-8编码的方法无效，绕了不少弯路，于是今天就来写一下博客，以防以后绕弯路</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210710011422.png"></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>点击<strong>Help—&gt;Edit Custom VM Options</strong></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><p>然后重启as就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建博客</title>
      <link href="/2021/07/08/create_blog/"/>
      <url>/2021/07/08/create_blog/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo搭建博客及部署到代码托管平台"><a href="#使用hexo搭建博客及部署到代码托管平台" class="headerlink" title="使用hexo搭建博客及部署到代码托管平台"></a>使用hexo搭建博客及部署到代码托管平台</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>下载node.js  <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>下载git  <a href="https://git-scm.com/">https://git-scm.com/</a></li></ul><h2 id="hexo安装与初始化"><a href="#hexo安装与初始化" class="headerlink" title="hexo安装与初始化"></a>hexo安装与初始化</h2><blockquote><p>官方中文文档  <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g //全局安装</span><br><span class="line"><span class="built_in">cd</span> 自己的博客文件夹 //文件夹必须是空的，不要有空格,汉字,特殊符号</span><br><span class="line">hexo init  //博客初始化</span><br><span class="line">npm install</span><br><span class="line">hexo server  //本地查看博客</span><br></pre></td></tr></table></figure><p>至此你就拥有了一个简陋的本地博客</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709102532.png"></p><h2 id="部署到代码托管平台"><a href="#部署到代码托管平台" class="headerlink" title="部署到代码托管平台"></a>部署到代码托管平台</h2><h3 id="创建一个GitHub仓库"><a href="#创建一个GitHub仓库" class="headerlink" title="创建一个GitHub仓库"></a>创建一个GitHub仓库</h3><p>名字必须是 <code>[你的用户名].github.io</code></p><p>如果您的账户名是limedroid,则需要创建一个<code>limedroid.github.io</code>的public仓库.</p><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="网站配置git"><a href="#网站配置git" class="headerlink" title="网站配置git"></a>网站配置git</h3><p>在网站的<code>_config.yml</code>中配置deploy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:  &lt;仓库<span class="built_in">clone</span>地址&gt; //冒号后面两个空格</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>首次使用git需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;godweiyang&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span>ssh-keygen</span><br></pre></td></tr></table></figure><p>找到C:\用户\[用户名]<code>.ssh</code>中的<code>id_rsa.pub</code></p><p>复制其中的内容到GitHub的<code>settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>new ssh key</code>-&gt;<code>key</code></p><p>title随便输入，点击<code>Add ssh key</code></p><p>这样就部署到GitHub了，gitee原理操作类似</p><h2 id="hexo的日常使用命令"><a href="#hexo的日常使用命令" class="headerlink" title="hexo的日常使用命令"></a>hexo的日常使用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g //渲染静态文件</span><br><span class="line">hexo d //部署到GitHub</span><br><span class="line">hexo g -d //渲染部署一气呵成</span><br><span class="line">hexo s //本地预览</span><br><span class="line">hexo new <span class="string">&#x27;hello&#x27;</span> //新建文章</span><br></pre></td></tr></table></figure><h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>你可以去官网<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 寻找自己喜欢的主题，也可以使用我正在使用的主题<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> ,无论什么主题，都有相应文档供你参考配置</p><h2 id="遇到的那些坑"><a href="#遇到的那些坑" class="headerlink" title="遇到的那些坑"></a>遇到的那些坑</h2><ul><li>如果遇到这样的报错</li></ul><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709111820.png"></p><p>你可以尝试输入此代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>写文章时需要注意什么</p><p><img src="https://cdn.jsdelivr.net/gh/geekHe-P/PicGo@master/article/20210709111937.png"></p></li></ul><p>每个属性冒号后面要有空格</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发日记_深色模式</title>
      <link href="/2021/06/26/kotlin_about_3/"/>
      <url>/2021/06/26/kotlin_about_3/</url>
      
        <content type="html"><![CDATA[<h2 id="深色模式报错解决办法"><a href="#深色模式报错解决办法" class="headerlink" title="深色模式报错解决办法"></a>深色模式报错解决办法</h2><p>在style.xml中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin那些事_2</title>
      <link href="/2021/06/25/kotlin_about_2/"/>
      <url>/2021/06/25/kotlin_about_2/</url>
      
        <content type="html"><![CDATA[<h2 id="Kotlin中-until和-的区别"><a href="#Kotlin中-until和-的区别" class="headerlink" title="Kotlin中 until和..的区别"></a>Kotlin中 until和..的区别</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;   <span class="comment">// 等价于 for (int i = 1 ; i &lt;= 5 ; i++) &#123; print(i) &#125;</span></span><br><span class="line">  print(i)  <span class="comment">// 12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>..是左右闭区间</p><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">5</span>) &#123;  <span class="comment">// 等价于 for (int i = 1 ; i &lt; 5 ; i++) &#123; print(i) &#125;</span></span><br><span class="line">  print(i) <span class="comment">// 1234</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>until是左闭右开区间</p><h2 id="小白解析json文件时，遇到的坑"><a href="#小白解析json文件时，遇到的坑" class="headerlink" title="小白解析json文件时，遇到的坑"></a>小白解析json文件时，遇到的坑</h2><p>哦，我的上帝啊，原来解析的json中不能有subjects，我懂了</p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin那些事_1</title>
      <link href="/2021/06/24/kotlin_about_1/"/>
      <url>/2021/06/24/kotlin_about_1/</url>
      
        <content type="html"><![CDATA[<h2 id="如果你想得到当前类的名字，在kotlin中你可以这么写"><a href="#如果你想得到当前类的名字，在kotlin中你可以这么写" class="headerlink" title="如果你想得到当前类的名字，在kotlin中你可以这么写"></a>如果你想得到当前类的名字，在kotlin中你可以这么写</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javaClass.simpleName</span><br></pre></td></tr></table></figure><p>那么得到当前类的名称有什么意义呢，有意义那是必然的，具体我也忘记了，，，，</p><h2 id="当你想让自己的对象为空时你可以试试这个"><a href="#当你想让自己的对象为空时你可以试试这个" class="headerlink" title="当你想让自己的对象为空时你可以试试这个?"></a>当你想让自己的对象为空时你可以试试这个<code>?</code></h2><p>这样或许可以避免一些空指针异常（我猜的</p><h2 id="当你需要类型转化时，在kotlin中你可以这么做"><a href="#当你需要类型转化时，在kotlin中你可以这么做" class="headerlink" title="当你需要类型转化时，在kotlin中你可以这么做"></a>当你需要类型转化时，在kotlin中你可以这么做</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> button = findViewById(R.id.send_button) <span class="keyword">as</span> Button</span><br></pre></td></tr></table></figure><p>当然上一篇博客博客说过了，现在没有必要findViewById，即便要用findViewById，这样写才是明智的</p><p><code>val button=findViewById&lt;Button&gt;(R.id.send_button)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin &#39;不需要findViewById&#39;特性消失问题-Android Studio</title>
      <link href="/2021/06/24/kotlin/"/>
      <url>/2021/06/24/kotlin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，在写安卓时kotlin的很多特性是非常爽的，但是就在颓废一年的我重新操起键盘敲代码时，突然发现，嗯？为什么不能直接找控件id了？特性取消了？以后还是要写繁琐的findViewById了？</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>于是我就百度了亿下，喔~原来是这样，在某个Android studio版本之后，软件就不自带kotlin的某个扩展插件了，只要我们加入这个插件就可以爽到飞天的使用kotlin了</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>就跟上文说的一样，加入插件就万事大吉喽</p><p>找到自己项目下的build.gradle，在plugins中加入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id &#x27;kotlin-android&#x27;</span><br><span class="line">id &#x27;kotlin-android-extensions&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> Android Stuidio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
